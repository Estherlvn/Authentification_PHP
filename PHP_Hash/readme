HASHAGE de mdp == obligatoire !
intéret: ne pas stocker un mdp en clair dans la bdd pour des questions de sécurité

C'est l'empreinte numérique (hash) qui est stockée en bdd :
(on ne stocke pas uniquement la partie Hashed password)
ALGORITHM + ALGO OPTIONS + SALT + Hashed password
== génère environ entre 80 et 100 carac. en bdd
=> d'ou l'interet du varCHAR255 de la table mdp en bdd

plusieurs catégories de hashage :

- algos de cryptage FAIBLES (à éviter pour hasher un mdp)
  md5
  sha256
- algos de cryptage FORTS
  Argon2i

failles/attaques :

- XSS = injection code malveillant via formulaires
- Faille CSRF Cross-Site Request Forgery = falsification de requête inter-site
  -> se prémunir avec systeme de jetons (tokens)
- Injections SQL = attaque de la bdd (interception requetes et valeurs associées)
  -> se prémunir avec des requetes dites "préparées"
- Attaque par force brut = l'attaque est aléatoire et utilise algos puissants avec itérations
- Attaque par dictionnaire = l'attaque se base sur un dico des mdp les plus utilisés

SOLUTIONS :

- recommandation cnil pour un mdp = 12 caractères (longueur et complexité)
  bonnes pratiques => majuscules, caractères spéciaux, chiffres, antropie

REGEX : regular expression 'expression régulière'
modèle de chaine de caractère

!ATTENTION
Ne pas déléguer la sécurité d'une appli au framework utilisé

PASSWORD VERIFIED :
password_verify
permet de vérifier le mdp proposé correspond au hash de la bdd
